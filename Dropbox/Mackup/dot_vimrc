if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Theme
Plug 'nanotech/jellybeans.vim'
" Icon
Plug 'ryanoasis/vim-devicons'
" Bottom status line
Plug 'itchyny/lightline.vim'
" Provide git status to lightline plugin
Plug 'itchyny/vim-gitbranch'
" File system explorer
Plug 'preservim/nerdtree'
" Dev icons with color in NerdTree
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
" Undo actions in tree view
Plug 'mbbill/undotree'
" Gitgutter + - M with line
Plug 'airblade/vim-gitgutter'
" Provide vertical lines at each indentation level
Plug 'Yggdroot/indentLine'
" Auto indenting
Plug 'tpope/vim-sleuth'
" Alignment tool
Plug 'junegunn/vim-easy-align'
" Automatically highlighting other uses of the current word under the cursor
Plug 'RRethy/vim-illuminate'
" Hyperfocus-writing in Vim.
Plug 'junegunn/limelight.vim'
" Insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'
" Color parentheses
Plug 'luochen1990/rainbow'
" Handle with parentheses, brackets, quotes, XML tags
Plug 'tpope/vim-surround'
" Fzf, outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Mark words
Plug 'lfv89/vim-interestingwords'
" TrailingSpace, use FixWhitespace fix it
Plug 'bronson/vim-trailing-whitespace'
" Multiple cursor to select/edit at the same time
Plug 'terryma/vim-multiple-cursors'
" Quick move cursor to key char
Plug 'easymotion/vim-easymotion'
" Highlight search tetms
Plug 'haya14busa/incsearch.vim'
" Quick jump with search tetms
" Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'haya14busa/incsearch-easymotion.vim'
" " AI autocomplete, only applies to machines with Linux
" if !has("macunix")
"   Plug 'kiteco/vim-plugin', { 'as': 'vim-kite' }
" endif
" Another tab complete tool, for general purpose case
Plug 'ervandew/supertab'
" A collection of language packs for Vim.
Plug 'sheerun/vim-polyglot'
" File manager for vim/neovim powered by n³.
Plug 'mcchrish/nnn.vim'
call plug#end()


" Set colorscheme
if (has("termguicolors"))
  set termguicolors
endif
colorscheme jellybeans
let g:jellybeans_overrides = {
\    'CursorLine': { 'ctermbg': '343C49', '256ctermbg': '343C49' },
\    'background': { 'ctermbg': 'none', '256ctermbg': 'none' },
\}
if has('termguicolors') && &termguicolors
    let g:jellybeans_overrides = {
    \    'CursorLine': { 'guibg': '343C49' },
    \    'background': { 'guibg': '1a1e24' },
    \}
endif


" Customize lightline (bottom status) with git branch name
" source: https://github.com/zenbro/dotfiles/blob/master/.nvimrc#L21-L92
" Modified
"   - Display gitbranch
let g:lightline = {
  \ 'colorscheme': 'jellybeans',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'fugitive', 'gitgutter', 'filename' ] ],
  \   'right': [ [ 'percent', 'lineinfo' ],
  \              [ 'syntastic' ],
  \              [ 'fileformat', 'fileencoding', 'filetype' ] ],
  \ },
  \ 'component_function': {
  \   'fugitive': 'LightLineFugitive',
  \   'gitgutter': 'LightLineGitGutter',
  \   'readonly': 'LightLineReadonly',
  \   'modified': 'LightLineModified',
  \   'syntastic': 'SyntasticStatuslineFlag',
  \   'filename': 'LightLineFilename',
  \   'gitbranch': 'gitbranch#name'
  \ },
  \ 'separator': { 'left': '▓▒░', 'right': '░▒▓' },
  \ 'subseparator': { 'left': '>', 'right': '' }
  \ }
function! LightLineModified()
  if &filetype == "help"
    return ""
  elseif &modified
    return "+"
  elseif &modifiable
    return ""
  else
    return ""
  endif
endfunction

function! LightLineReadonly()
  if &filetype == "help"
    return ""
  elseif &readonly
    return "RO"
  else
    return ""
  endif
endfunction

function! LightLineFugitive()
  return exists('*fugitive#head') ? fugitive#head() : ''
endfunction

function! LightLineGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth('.') <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added,
        \ g:gitgutter_sign_modified,
        \ g:gitgutter_sign_removed
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

function! LightLineFilename()
  return ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
      \ ('' != expand('%:t') ? expand('%:t') : '[No Name]') .
      \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction


" Customize indentLine
let g:indentLine_concealcursor = 'inc'
let g:indentLine_conceallevel = 2
let g:indentLine_char = '⎸'
let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = '.'


" Customize GitGutter color (seem is not working, always follow color scheme) and updatetime
"highlight GitGutterAdd ctermfg=green
"highlight GitGutterChange ctermfg=yellow
"highlight GitGutterDelete ctermfg=red
"highlight GitGutterChangeDelete ctermfg=yellow
set updatetime=250


" Enable color brackets
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle


" Use a line cursor within insert mode and a block cursor everywhere else.
"
" Reference chart of values:
"   Ps = 0  -> blinking block.
"   Ps = 1  -> blinking block (default).
"   Ps = 2  -> steady block.
"   Ps = 3  -> blinking underline.
"   Ps = 4  -> steady underline.
"   Ps = 5  -> blinking bar (xterm).
"   Ps = 6  -> steady bar (xterm).
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)
" fix issue: https://stackoverflow.com/questions/4777950/vim-change-block-cursor-when-in-insert-mode
set ttimeout
set ttimeoutlen=1
set listchars=tab:>-,trail:~,extends:>,precedes:<,space:.
set ttyfast


" Highlight words color style
let g:interestingWordsGUIColors = ['#8CCBEA', '#A4E57E', '#FFDB72', '#FF7272', '#FFB3FF', '#9999FF']
let g:interestingWordsTermColors = ['154', '121', '211', '137', '214', '222']
let g:interestingWordsRandomiseColors = 1


" FZF
" let g:fzf_command_prefix = 'Fzf'
" - customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
" - layout - down / up / left / right
let g:fzf_layout = { 'down': '40%' }
" - extra keybinding
nmap <C-p> :Files<CR>
nmap <C-e> :Buffers<CR>
nmap <C-r> :Commands<CR>
let g:fzf_action = { 'ctrl-e': 'edit' }


" Vim buffer color scheme (used for open terminal inside vim)
let g:terminal_ansi_colors = [
  \ '#141414', '#bb5653',
  \ '#909d62', '#eac179',
  \ '#698698', '#b06597',
  \ '#c9dfff', '#d8d8d8',
  \ '#626262', '#bb5653',
  \ '#9fab76', '#eac179',
  \ '#7da9c7', '#b06597',
  \ '#abbacf', '#f7f7f7',
  \]


" Auto trailing spaces before saved files
autocmd BufWritePre * :%s/\s\+$//e


" Others
let mapleader = ","
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map z/ <Plug>(incsearch-easymotion-/)
map z? <Plug>(incsearch-easymotion-?)
map zg/ <Plug>(incsearch-easymotion-stay)


syntax on
syntax enable
filetype plugin indent on
set number
set relativenumber
set cursorline
set backspace=indent,eol,start
set noshowmode
set laststatus=2
set whichwrap+=<,>,h,l,[,]
" fold
set foldmethod=syntax
" no fold when launch vim
set nofoldenable
" tab width
set tabstop=4
set shiftwidth=4
set expandtab
set scrolloff=15
" Used for vim-devicons
set encoding=UTF-8
